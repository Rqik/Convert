{"version":3,"sources":["types/currency.ts","components/Input/Input.tsx","components/Number/Number.tsx","components/FinanceToday/FinanceToday.tsx","components/FinanceList/FinanceList.tsx","hooks/useTypedSelector.ts","store/actionCreator/currencyAction.ts","App.tsx","hooks/useAction.ts","store/reducers/currencyReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["CurrencyActionTypes","Input","Number","number","difference","priceChange","size","className","FinanceToday","Name","CharCode","Value","Previous","Nominal","valueChange","Math","round","FinanceList","curs","itemList","Object","keys","map","el","useTypeSelector","useSelector","fetchCurrency","dispatch","a","type","FETCH_CURRENCY","axios","get","response","FETCH_CURRENCY_SUCCESS","payload","data","Valute","FETCH_CURRENCY_ERROR","App","state","currency","error","loading","useDispatch","bindActionCreators","CurrencyActionCreator","useAction","useEffect","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2125eaaf.chunk.js","sourcesContent":["export interface Currency {\r\n  CharCode: string,\r\n  ID: string,\r\n  Name: string,\r\n  Nominal: number,\r\n  NumCode: string,\r\n  Previous: number,\r\n  Value: number,\r\n}\r\n\r\nexport interface CurrencyList {\r\n  [key: string]: Currency,\r\n}\r\n\r\nexport interface CurrencyState {\r\n  error: null | string,\r\n  loading: boolean,\r\n  currency: CurrencyList,\r\n}\r\n\r\nexport enum CurrencyActionTypes {\r\n  FETCH_CURRENCY = 'FETCH_CURRENCY',\r\n  FETCH_CURRENCY_SUCCESS = 'FETCH_CURRENCY_SUCCESS',\r\n  FETCH_CURRENCY_ERROR = 'FETCH_CURRENCY_ERROR',\r\n}\r\n\r\ninterface FetchCurrencyAction {\r\n  type: CurrencyActionTypes.FETCH_CURRENCY\r\n}\r\n\r\ninterface FetchCurrencySuccessAction {\r\n  type: CurrencyActionTypes.FETCH_CURRENCY_SUCCESS,\r\n  payload: any\r\n}\r\n\r\ninterface FetchCurrencyErrorAction {\r\n  type: CurrencyActionTypes.FETCH_CURRENCY_ERROR,\r\n  payload: string\r\n}\r\n\r\nexport  type CurrencyAction =\r\n  FetchCurrencyAction\r\n  | FetchCurrencyErrorAction\r\n  | FetchCurrencySuccessAction\r\n","import React, {FC} from 'react';\r\n\r\nconst Input: FC = () => {\r\n  return <input/>\r\n}\r\n\r\nexport {Input}\r\n","import React, {FC} from 'react';\r\nimport './Number.scss'\r\nexport type priceChange = 'increased' | 'decreased'\r\ntype size = 'font-big' | 'font-small'\r\ninterface NumberProps {\r\n  number : number | string,\r\n  difference?: number,\r\n  priceChange?: priceChange,\r\n  size?: size\r\n}\r\nconst Number: FC <NumberProps>= ({number, difference,priceChange, size })=>{\r\n\r\n  return <div className={`number ${priceChange && 'number_'+priceChange }\r\n   ${size && 'number_'+size }`}>\r\n    {number}\r\n    { difference && <div className=\"number__difference\"> {difference}</div>}\r\n  </div>\r\n}\r\n\r\nexport {Number}\r\n","import React, {FC} from 'react';\r\nimport {Number, priceChange} from '../Number/Number';\r\n\r\nexport interface FinanceTodayProps {\r\n  Name: string,\r\n  CharCode: string,\r\n  Value: number,\r\n  Previous: number,\r\n  Nominal: number\r\n}\r\n\r\nconst FinanceToday: FC<FinanceTodayProps> = ({Name, CharCode, Value, Previous, Nominal}) => {\r\n\r\n\r\n  let valueChange: priceChange = Value < Previous ? 'decreased' : 'increased'\r\n  let previousChange: priceChange = Value > Previous ? 'decreased' : 'increased'\r\n  let difference = Math.round((Value - Previous) * 10000) / 10000\r\n  return (\r\n    <div className=\"finance\">\r\n      <div className=\"finance__currency\">\r\n        <div className=\"finance__name\">{Name}</div>\r\n        <div className=\"finance__abbreviation\">{CharCode}</div>\r\n      </div>\r\n\r\n      <div className=\"finance__current-value\">\r\n        <div className=\"finance__today\">\r\n          <Number number={Value} difference={difference}\r\n                  priceChange={valueChange}/>\r\n          <div className=\"finance__caption\">цена сегодня</div>\r\n        </div>\r\n        <div className=\"finance__tomorrow\">\r\n          <Number number={Previous} size=\"font-small\"/>\r\n          <div className=\"finance__caption\">цена вчера</div>\r\n        </div>\r\n        <div className=\"finance__ratio\">\r\n          <div className=\"finance__ratio-span\">{Nominal+ CharCode}</div>\r\n          1RUB\r\n        </div>\r\n      </div>\r\n\r\n    </div>)\r\n}\r\n\r\nexport {FinanceToday}\r\n","import React, {FC} from 'react';\r\nimport {CurrencyList} from '../../types/currency';\r\nimport {FinanceToday} from '../FinanceToday';\r\n\r\ninterface FinanceListProps {\r\n  curs: CurrencyList\r\n}\r\n\r\nconst FinanceList: FC<FinanceListProps> = ({curs = {}}) => {\r\n  const itemList = Object.keys(curs).map((el) => {\r\n    return (\r\n      <FinanceToday\r\n        key={curs[el].Previous * curs[el].Value} Name={curs[el].Name}\r\n        CharCode={curs[el].CharCode}\r\n        Value={curs[el].Value}\r\n        Previous={curs[el].Previous}\r\n        Nominal={curs[el].Nominal}\r\n      />)\r\n  })\r\n\r\n  return (\r\n    <div className=\"finance-list\">\r\n      {itemList}\r\n    </div>\r\n  )\r\n}\r\nexport {FinanceList}\r\n","import {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {RootState} from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import axios from 'axios';\r\nimport {CurrencyAction, CurrencyActionTypes} from '../../types/currency';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const fetchCurrency = () => {\r\n  return async (dispatch: Dispatch<CurrencyAction>) => {\r\n    try {\r\n      dispatch({type: CurrencyActionTypes.FETCH_CURRENCY})\r\n\r\n      let response = await axios.get(`https://www.cbr-xml-daily.ru/daily_json.js`)\r\n      dispatch({\r\n        type: CurrencyActionTypes.FETCH_CURRENCY_SUCCESS,\r\n        payload: response.data.Valute\r\n      })\r\n    } catch (e) {\r\n      dispatch({type: CurrencyActionTypes.FETCH_CURRENCY_ERROR, payload: 'Произошла ошибка'})\r\n    }\r\n  }\r\n}\r\n","import React, {useEffect} from 'react';\nimport {Input} from './components/Input';\nimport {FinanceList} from './components/FinanceList';\nimport {useTypeSelector} from './hooks/useTypedSelector';\nimport {useAction} from './hooks/useAction';\n\nfunction App() {\n  const {currency, error, loading} = useTypeSelector(state => state.currency)\n  const {fetchCurrency} = useAction()\n\n  useEffect(() => {\n    fetchCurrency()\n  }, [])\n\n\n  if (loading) {\n    return <div>Идет загрузка</div>\n  }\n\n  if (error) {\n    return <h1>Упс произошла ошибка {error}</h1>\n  }\n\n  return (\n    <div className=\"App\">\n      <FinanceList curs={currency}/>\n      <Input/>\n    </div>\n  );\n}\n\nexport default App;\n","import {useDispatch} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as CurrencyActionCreator from '../store/actionCreator/currencyAction'\r\n\r\nexport const useAction = () => {\r\n  const dispatch = useDispatch()\r\n  return bindActionCreators(CurrencyActionCreator, dispatch)\r\n}\r\n","import {\r\n  CurrencyAction,\r\n  CurrencyActionTypes,\r\n  CurrencyState\r\n} from '../../types/currency';\r\n\r\n\r\nconst initialState: CurrencyState = {\r\n  error: null,\r\n  currency: {},\r\n  loading: false,\r\n}\r\n\r\nexport const currencyReducer = (state = initialState, action: CurrencyAction): CurrencyState => {\r\n  switch (action.type) {\r\n    case CurrencyActionTypes.FETCH_CURRENCY:\r\n      return {loading: true, error: null, currency: {}}\r\n    case CurrencyActionTypes.FETCH_CURRENCY_SUCCESS:\r\n      return {loading: false, error: null, currency: action.payload}\r\n    case CurrencyActionTypes.FETCH_CURRENCY_ERROR:\r\n      return {loading: false, error: action.payload, currency: {}}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n","import {combineReducers} from 'redux';\r\nimport {currencyReducer} from './currencyReducer';\r\n\r\nexport const rootReducer  = combineReducers({\r\n  currency: currencyReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport {rootReducer} from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport './styles/main.scss'\n\nimport {store} from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}